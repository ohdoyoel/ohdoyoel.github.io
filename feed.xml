<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ohdoyoel.github.io/</id><title>Daniel Oh</title><subtitle>GitHub Page of Daniel Oh</subtitle> <updated>2023-12-29T03:06:11+09:00</updated> <author> <name>Daniel Oh</name> <uri>https://ohdoyoel.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://ohdoyoel.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://ohdoyoel.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Daniel Oh </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>C EXAMPLES: CLASS</title><link href="https://ohdoyoel.github.io/posts/class/" rel="alternate" type="text/html" title="C EXAMPLES: CLASS" /><published>2022-06-15T16:48:06+09:00</published> <updated>2022-06-15T15:53:51+09:00</updated> <id>https://ohdoyoel.github.io/posts/class/</id> <content src="https://ohdoyoel.github.io/posts/class/" /> <author> <name>Daniel Oh</name> </author> <category term="Programming" /> <category term="C/C++" /> <summary> 필자의 대학 코스 Advanced Programming에서 사용된 예시를 발췌, 정리했습니다. FINAL 시험에서 좋은 성과를 바라며… Rectangle Class rectangle.h #ifndef RECTANGLE_H #define RECTANGLE_H #include &amp;lt;iostream&amp;gt; class rectangle { double width, height; // 멤버 변수 public: rectangle(double w, double h) : width(w), height(h) {} // 생성자 double get_width() const { return this-&amp;gt;width; } // 멤버 함수 double get_height() const { return this... </summary> </entry> <entry><title>C EXAMPLES: STRUCT</title><link href="https://ohdoyoel.github.io/posts/struct/" rel="alternate" type="text/html" title="C EXAMPLES: STRUCT" /><published>2022-06-06T13:48:06+09:00</published> <updated>2022-06-06T13:48:06+09:00</updated> <id>https://ohdoyoel.github.io/posts/struct/</id> <content src="https://ohdoyoel.github.io/posts/struct/" /> <author> <name>Daniel Oh</name> </author> <category term="Programming" /> <category term="C/C++" /> <summary> 필자의 대학 코스 Advanced Programming에서 사용된 예시를 발췌, 정리했습니다. FINAL 시험에서 좋은 성과를 바라며… POINT Point라는 구조체는 x좌표와 y좌표로 정의될 수 있습니다. #include &amp;lt;iostream&amp;gt; #include &amp;lt;cmath&amp;gt; // for sqrt struct point { double x; double y; }; double d(point const * p1, point const * p2) // 1 { double x_diff = p1-&amp;gt;x - p2-&amp;gt;x; // 1 double y_diff = p1-&amp;gt;y - p2-&amp;gt;y; // 1 return sqrt(x_diff*x... </summary> </entry> <entry><title>DANIEL's Histroty of Orthodontic Correction</title><link href="https://ohdoyoel.github.io/posts/tooth-transformation/" rel="alternate" type="text/html" title="DANIEL's Histroty of Orthodontic Correction" /><published>2022-05-18T14:02:30+09:00</published> <updated>2022-05-18T14:02:30+09:00</updated> <id>https://ohdoyoel.github.io/posts/tooth-transformation/</id> <content src="https://ohdoyoel.github.io/posts/tooth-transformation/" /> <author> <name>Daniel Oh</name> </author> <summary> What is Orthodontic Correction? Simply put, it means wearing braces on crooked teeth, for straightening (teeth transformation). I started to wear braces from Feb 8, 2022. So I’m in 3 month with braces. Today, I’m gonna introduce my history of teeth transformation. History of Orthdontic Correction The beginning Progress of tooth transformation Insight It is too hurt… I ... </summary> </entry> <entry><title>문제로 풀어보는 알고리즘 01장: 재귀적 프로그래밍</title><link href="https://ohdoyoel.github.io/posts/algorithm-with-ps-01/" rel="alternate" type="text/html" title="문제로 풀어보는 알고리즘 01장: 재귀적 프로그래밍" /><published>2022-04-19T22:40:43+09:00</published> <updated>2022-04-20T21:40:03+09:00</updated> <id>https://ohdoyoel.github.io/posts/algorithm-with-ps-01/</id> <content src="https://ohdoyoel.github.io/posts/algorithm-with-ps-01/" /> <author> <name>Daniel Oh</name> </author> <category term="Problem Solving" /> <category term="문제로 풀어보는 알고리즘" /> <summary> n! 계산하기 반복문을 이용하여 n! 계산하기 n!은 다음과 같이 정의된다. \[n! = 1 \times 2 \times \cdots \times n\] int factorial(int n) { int r = 1; for(int i = 1; i &amp;lt;= n; i++) r *= i; return r; } 일정한 규칙을 가진 곱셈을 반복하므로, 반복문을 사용하면 쉽게 작성할 수 있다. 재귀함수를 이용하여 n! 계산하기 재귀함수를 이용하여 n!을 구하기 위해서는, 재귀적으로 n!을 정의해야 한다. 재귀적으로 함수를 정의한다는 뜻, 함수 내부에서 동일한 함수를 호출한다는 것을 의미한다. 즉 수학적 관점에서는 점화식과 유사한 개념이라고 볼 수 있다. ... </summary> </entry> <entry><title>C EXAMPLES: RECURSION</title><link href="https://ohdoyoel.github.io/posts/recursion/" rel="alternate" type="text/html" title="C EXAMPLES: RECURSION" /><published>2022-04-19T21:31:06+09:00</published> <updated>2022-04-19T21:31:06+09:00</updated> <id>https://ohdoyoel.github.io/posts/recursion/</id> <content src="https://ohdoyoel.github.io/posts/recursion/" /> <author> <name>Daniel Oh</name> </author> <category term="Programming" /> <category term="C/C++" /> <summary> 필자의 대학 코스 Advanced Programming에서 사용된 예시를 발췌, 정리했습니다. Calculate Power Base Case (y = 0) \[x^{0} = 1\] Recursive Case (y &amp;gt;= 1) \[x^{y} = x \times x^{y-1}\] unsigned long power(unsigned int x, unsigned int y) { if (y == 0) return 1; else return x * power(x, y - 1); } 하지만 이 코드는 y만큼의 스택을 생성하기에 Stack Overflow가 발생할 가능성이 다분하다.... </summary> </entry> </feed>
